/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"github.com/go-logr/logr"
	_ "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	_ "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	_ "k8s.io/apimachinery/pkg/types"
	_ "reflect"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"strings"

	wordpressfullstackv1 "github.com/James-Moore/wordpress-operator/api/v1"
)

// WordpressReconciler reconciles a Wordpress object
type WordpressReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=wordpress-fullstack.jamesmoore.in,resources=wordpresses,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=wordpress-fullstack.jamesmoore.in,resources=wordpresses/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=core,resources=pods,verbs=get;list;
func (r *WordpressReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {
	ctx := context.Background()
	log := r.Log.WithValues("wordpress", req.NamespacedName)

	log.Info("CHECKPOINT 1")
	// Fetch the wordpress instance
	wp := &wordpressfullstackv1.Wordpress{}
	err := r.Get(ctx, req.NamespacedName, wp)
	if err != nil {
		if errors.IsNotFound(err) {
			// Request object not found, could have been deleted after reconcile request.
			// Owned objects are automatically garbage collected. For additional cleanup logic use finalizers.
			// Return and don't requeue
			log.Info("Wordpress resource has been deleted.")
			return ctrl.Result{}, nil
		}
		// Error reading the object - requeue the request.
		log.Error(err, "Failed to get Wordpress")
		return ctrl.Result{}, err
	}

	log.Info("CHECKPOINT 2")
	// Update the wordpress status with the pod names
	// List the pods for this wordpress's deployment

	podList := &corev1.PodList{}
	listOpts := []client.ListOption{
		client.InNamespace(wp.Namespace),
		//client.MatchingLabels(labelsForMemcached(wp.Name)),
	}
	if err = r.List(ctx, podList, listOpts...); err != nil {
		log.Error(err, "Failed to list pods", "Memcached.Namespace", wp.Namespace, "Memcached.Name", wp.Name)
		return ctrl.Result{}, err
	}

	log.Info("CHECKPOINT 3")
	podNames := getPodNames(podList.Items)
	log.Info("CHECKPOINT 4")
	log.Info("PODS:\n" + strings.Join(podNames, "\n"))

	wp.Status.

	//for _, s := range podNames {
	//	log.Info(s)
	//}

	//// Update status.Nodes if needed
	//if !reflect.DeepEqual(podNames, wp.Status.Nodes) {
	//	wp.Status.Wordpress = podNames
	//	err := r.Status().Update(ctx, wp)
	//	if err != nil {
	//		log.Error(err, "Failed to update Memcached status")
	//		return ctrl.Result{}, err
	//	}
	//}

	log.Info("CHECKPOINT 5")
	return ctrl.Result{}, nil
}

// getPodNames returns the pod names of the array of pods passed in
func getPodNames(pods []corev1.Pod) []string {
	var podNames []string
	for _, pod := range pods {
		podNames = append(podNames, pod.Name)
	}
	return podNames
}

func (r *WordpressReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&wordpressfullstackv1.Wordpress{}).
		Owns(&corev1.Pod{}).
		Complete(r)
}







//// labelsForWordpress returns the labels for selecting the resources
//// belonging to the given wordpress CR name.
//func labelsForWordpress(name string) map[string]string {
//	return map[string]string{"app": "wordpress", "wordpress_cr": name, "tier": "server"}
//}
//
//// labelsForWordpress returns the labels for selecting the resources
//// belonging to the given wordpress CR name.
//func labelsForMysql(name string) map[string]string {
//	return map[string]string{"app": "wordpress", "wordpress_cr": name, "tier": "database"}
//}
//
//// deploymentForWordpress returns a wordpress Deployment object
//func (r *WordpressReconciler) deploymentForWordpress(m *wordpressfullstackv1.Wordpress) *appsv1.Deployment {
//	ls := labelsForWordpress(m.Name)
//
//	wordpressContainer := corev1.Container{
//		Name:  "wordpress",
//		Image: "wordpress",
//		Env: []corev1.EnvVar{
//			{
//				Name:  "WORDPRESS_DB_HOST",
//				Value: "localhost:33060",
//			},
//			{
//				Name:  "WORDPRESS_DB_USER",
//				Value: "root",
//			},
//			{
//				Name:  "WORDPRESS_DB_PASSWORD",
//				Value: "Password1234",
//			},
//			{
//				Name:  "WORDPRESS_DB_NAME",
//				Value: "wordpress",
//			},
//			{
//				Name:  "WORDPRESS_TABLE_PREFIX",
//				Value: "wp_",
//			},
//		},
//	}
//
//	containers := []corev1.Container{wordpressContainer}
//
//	dep := &appsv1.Deployment{
//		ObjectMeta: metav1.ObjectMeta{
//			Name:      m.Name,
//			Namespace: m.Namespace,
//		},
//		Spec: appsv1.DeploymentSpec{
//			//Replicas: replicas,
//			Selector: &metav1.LabelSelector{
//				MatchLabels: ls,
//			},
//			Template: corev1.PodTemplateSpec{
//				ObjectMeta: metav1.ObjectMeta{
//					Labels: ls,
//				},
//				Spec: corev1.PodSpec{
//					Containers: containers,
//				},
//			},
//		},
//	}
//	// Set Wordpress instance as the owner and controller
//	ctrl.SetControllerReference(m, dep, r.Scheme)
//	return dep
//}
//
//// deploymentForWordpress returns a wordpress Deployment object
//func (r *WordpressReconciler) deploymentForMysql(m *wordpressfullstackv1.Wordpress) *appsv1.Deployment {
//	ls := labelsForMysql(m.Name)
//
//	mysqlContainer := corev1.Container{
//		Name:  "mysql",
//		Image: "mysql",
//		Ports: []corev1.ContainerPort{{
//			Name:          "mysql",
//			ContainerPort: 3306,
//			Protocol:      "TCP",
//			HostIP:        "127.0.0.1",
//			HostPort:      3306,
//		}},
//		Env: []corev1.EnvVar{{
//			Name:  "MYSQL_ROOT_PASSWORD",
//			Value: "Password1234",
//		}},
//	}
//	containers := []corev1.Container{mysqlContainer}
//
//	dep := &appsv1.Deployment{
//		ObjectMeta: metav1.ObjectMeta{
//			Name:      m.Name,
//			Namespace: m.Namespace,
//		},
//		Spec: appsv1.DeploymentSpec{
//			//Replicas: replicas,
//			Selector: &metav1.LabelSelector{
//				MatchLabels: ls,
//			},
//			Template: corev1.PodTemplateSpec{
//				ObjectMeta: metav1.ObjectMeta{
//					Labels: ls,
//				},
//				Spec: corev1.PodSpec{
//					Containers: containers,
//				},
//			},
//		},
//	}
//
//	// Set Wordpress instance as the owner and controller
//	ctrl.SetControllerReference(m, dep, r.Scheme)
//	return dep
//}
